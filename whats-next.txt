Tasks - Open
* Transport system.
** DONE Refactor that the list operations are hidden by methods of a Manager class.
*** DONE Implement ExampleUnitTest.request the unit test to drive the design
**** DONE TransportManagerNew.createActiveTransports() needs to generate a route
**** DONE The current Test is a little wide. Build tests for MapManager
**** DONE Make the test work

** Improve coordinate grid
**** Double Coordinates Koordinatensystem benutzen

*** Implement the Routing in TransportManager
**** DONE Find pseudo code for A*, is optimized for arrays https://rosettacode.org/wiki/A*_search_algorithm#Java . Does not work nice with my Lists
**** DONE Try A* with TestData
**** DONE Find variant with hexagons. Find out if its a worth read to build own algorithm with hexagons- https://www.redblobgames.com/grids/hexagons/
**** DONE Create a skeleton for the routing algorithm
**** DONE Implement get Neighbour Function
**** DONE A* Tutorial von ihm https://www.redblobgames.com/pathfinding/a-star/introduction.html -  Für den Anfang reicht https://www.redblobgames.com/pathfinding/a-star/introduction.html#breadth-first-search
**** Integration in TransportManager

**** Improve CommandQuerySepartion at TransportManager
**** Build specific tests for transportManager
**** All interactions with cells should go through the GameState Objects
**** Apply the new architecture of TransportManager to the project
**** Apply the new architecture of MapManager to the project
**** Create the routing algorithm


** Make simple class structure without dependencies
*** Should start by simple coordinate
*** Create a transport class which accepts Start and destination
** Write tests for Transport
** Do I need neighbour pointers for my cells?
** Investigate A* Algorithm
* Plan enemy
** Zombie? which moves from spawner to attack most valueable buildung
* Defense tower
** Add build defense tower for 5 Wood
** Shoots projectiles at Zombies
* Combat system
** Buildings have lifepoints
** If Zombies move onto them, they do 1 dmg per round
** Buildings can request material, to be repaired

* Monument
** Add Build Pyramids for 100 Wood

Tasks - Done
* Create a dependency diagramm out of the .jar with a tool
** Automatisch geht nur mit der Intellij Ultimate Edition
** Alternative ist PlantUML, hier kann man das UML Diagram von Hand schreiben.
** Allerdings gibts es einen Code Generator nur für Java
** Scrollable map
*** Run on small phones to see if the scrollable map works
*** ALternative is some grid system, which expands to a single cell on a bigger grid
**** Works ok on Pixel 5 with 5" screen
* Understand how to apply Next Action Approach by watching the video
** Figure out what is the next single step. Decide based on that step what is the next


M1 MVP
* Design MVP which is playable
** Gameloop
*** What are must have buildings
**** (Townhall) Storage
**** (Lumberjack) Material
**** (Defensetower) Shoot zombies
***
** Goal
*** Build Monument
** Obstacles
*** Enemy spawners
**** Send waves
** Pixelart Graphics
** Scrollable map
*** Run on small phones to see if the scrollable map works
*** ALternative is some grid system, which expands to a single cell on a bigger grid

M2 Playstore
* Make App Icon
* Write Description Text
* Configure Setting
* Launch

M3 Add features